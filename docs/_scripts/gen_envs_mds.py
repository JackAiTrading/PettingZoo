"""
此脚本从 /pettingzoo 目录读取文档，并将其转换为 docs/ 目录中的 Markdown 文件。
"""

import os
import re

from pettingzoo.utils.all_modules import all_environments


def add_frontmatter(text, frontmatter_options):
    """添加 YAML 前置元数据。

    Args:
        text: 文档内容
        frontmatter_options: 前置元数据选项字典

    Returns:
        添加了前置元数据的文档内容
    """
    frontmatter_text = "---\nautogenerated:"
    for key, value in frontmatter_options.items():
        frontmatter_text += f"\n{key}: {value}"
    frontmatter_text += "\n---\n\n"
    return frontmatter_text + text


def create_docs_md(file_path, text, frontmatter_options):
    """创建 Markdown 文档文件。

    Args:
        file_path: 文件路径
        text: 文档内容
        frontmatter_options: 前置元数据选项
    """
    text = add_frontmatter(text, frontmatter_options)
    with open(file_path, "w", encoding="utf-8") as file:
        file.write(text)


def get_docs_from_py(file_path):
    """从 Python 文件中提取文档字符串。

    Args:
        file_path: Python 文件路径

    Returns:
        文档字符串内容
    """
    print(file_path)
    with open(file_path, encoding="utf-8") as fp:
        text = fp.read()
        # 匹配文件开头的文档字符串
        regex = re.compile(r'^r?"""\s*((\n|.)*?)("""\s*\n)', re.MULTILINE)
        match = regex.search(text)
        if match:
            return match.group(1)
        else:
            return ""


if __name__ == "__main__":
    # 忽略的目录
    ignore_dirs = ["test", "utils"]
    # 设置文档目录和环境目录路径
    docs_dir = os.path.join(os.path.dirname(__file__), "..")
    envs_dir = os.path.join(os.path.dirname(__file__), "..", "..", "pettingzoo")
    
    # 遍历所有环境类型
    for env_type in os.listdir(envs_dir):
        env_type_path = os.path.join(envs_dir, env_type)
        if not os.path.isdir(env_type_path) or env_type in ignore_dirs:
            continue
        envs_list = os.listdir(env_type_path)
        if "__pycache__" in envs_list:
            envs_list.remove("__pycache__")

        # RLCard 环境使用不同的文件夹结构
        if "rlcard_envs" in envs_list:
            envs_list.pop(envs_list.index("rlcard_envs"))
            for i in os.listdir(os.path.join(env_type_path, "rlcard_envs")):
                if (
                    not os.path.isdir(os.path.join(env_type_path, "rlcard_envs", i))
                    and i != "__init__.py"
                    and i != "rlcard_base.py"
                ):
                    envs_list.append(os.path.join("rlcard_envs", i[:-3]))
            envs_list = sorted(envs_list)

        # 过滤环境列表，只保留目录（除了 utils）和 RLCard 环境
        envs_list = list(
            filter(
                lambda x: (
                    os.path.isdir(os.path.join(env_type_path, x))
                    and "utils" not in os.path.join(env_type_path, x)
                )
                or "rlcard_envs" in x,
                envs_list,
            )
        )

        # 处理每个环境
        for i, env_name in enumerate(envs_list):
            env_dir_path = os.path.join(env_type_path, env_name)

            # 处理 RLCard 环境的特殊路径
            if "rlcard_envs" in env_dir_path:
                env_name = env_name.replace("\\", "/").split("/")[1]

            # 设置前置元数据选项
            frontmatter_options = {
                "env_icon": f'"../../../_static/img/icons/{env_type}/{env_name}.png"'
            }

            # 设置首页和末页标记
            if i == 0:
                frontmatter_options["firstpage"] = ""
            elif i == len(envs_list) - 1:
                frontmatter_options["lastpage"] = ""

            # 获取环境文档
            docs_text = get_docs_from_py(
                os.path.join(env_dir_path, env_name + ".py")
                if "rlcard_envs" not in env_dir_path
                else env_dir_path + ".py"
            )
            
            # 为每个环境页面添加完整的使用示例
            full_env_names = [
                full_name
                for full_name in all_environments.keys()
                if env_name in full_name
            ]
            env_name_version = full_env_names[0].split("/")[1]
            
            # 根据环境类型添加不同的使用示例
            if env_type == "classic" and env_name != "rps":
                # 经典环境（除了石头剪刀布）使用带动作掩码的 AEC 示例
                with open(f"{docs_dir}/code_examples/usage_aec_action_mask.py") as f:
                    usage = f.read()
                usage = usage.replace("connect_four_v3", env_name_version)
                docs_text += f"""## Usage
### AEC
```python
{usage}
```
"""
            else:
                # 其他环境使用标准的 AEC 和并行示例
                with open(f"{docs_dir}/code_examples/usage_aec.py") as f:
                    usage = f.read()
                usage = usage.replace("space_invaders_v2", env_name_version)
                usage = usage.replace("atari", env_type)
                with open(f"{docs_dir}/code_examples/usage_parallel.py") as f:
                    usage_parallel = f.read()
                usage_parallel = usage_parallel.replace(
                    "pistonball_v6", env_name_version
                )
                usage_parallel = usage_parallel.replace("butterfly", env_type)
                docs_text += f"""## Usage
### AEC
```python
{usage}
```
### Parallel
```python
{usage_parallel}
```
"""
            
            # 添加 API 信息
            if "rlcard_envs" in env_dir_path:
                # RLCard 环境的 API 文档
                docs_text += f"""## API
```{{eval-rst}}
.. currentmodule:: pettingzoo.{env_type}.rlcard_envs.{env_name}

.. autoclass:: env
.. autoclass:: raw_env
   :members:
```
"""
            elif env_type in ["mpe", "atari"]:
                # MPE 和 Atari 环境的 API 文档
                docs_text += f"""## API
```{{eval-rst}}
.. currentmodule:: pettingzoo.{env_type}.{env_name}.{env_name}

.. autoclass:: raw_env
   :members:
   :undoc-members:
```
"""
            else:
                # 其他环境的 API 文档
                docs_text += f"""## API
```{{eval-rst}}
.. currentmodule:: pettingzoo.{env_type}.{env_name}.{env_name}

.. autoclass:: env
.. autoclass:: raw_env
   :members:
```
"""
            
            # 创建文档文件
            docs_env_path = os.path.join(
                docs_dir,
                "environments",
                env_type,
                env_name + ".md",
            )
            create_docs_md(
                docs_env_path,
                docs_text,
                frontmatter_options,
            )
